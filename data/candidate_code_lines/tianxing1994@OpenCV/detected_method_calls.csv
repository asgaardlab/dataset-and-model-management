call_root_type,method_name,method_call,line_no,call_root,call_root_line_no,qualifying_name,call_root_package,relative_file_path,repository_name,file_path
assignment_unknown,load,svm.load(model_path),218,svm = get_empty_svm(),217,get_empty_svm.load,get_empty_svm,opencv 高阶应用/HOG SVM 目标检测.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\opencv 高阶应用\HOG SVM 目标检测.py
assignment_unknown,load,hog.load(filename=model_path),254,hog = get_hog_detector(),253,get_hog_detector.load,get_hog_detector,opencv 高阶应用/HOG SVM 目标检测.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\opencv 高阶应用\HOG SVM 目标检测.py
assignment_unknown,load,hog.load(filename=model_path),272,hog = get_hog_detector(),271,get_hog_detector.load,get_hog_detector,opencv 高阶应用/HOG SVM 目标检测.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\opencv 高阶应用\HOG SVM 目标检测.py
assignment_import,fit,"clf.fit(data, target)",31,clf = GaussianNB(),27,sklearn.naive_bayes.GaussianNB.fit,sklearn,opencv 高阶应用/高斯贝叶斯聚合图像.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\opencv 高阶应用\高斯贝叶斯聚合图像.py
assignment_unknown,fit,"tree.fit(X_sub, residuals_sub, max_depth, min_samples_split)",277,tree = RegressionTree(),276,object.fit,object,算法实现/GBDT 分类.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\GBDT 分类.py
assignment_unknown,fit,"clf.fit(X_train, y_train, n_estimators=10,",308,clf = GradientBoostingClassifier(),307,object.fit,object,算法实现/GBDT 分类.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\GBDT 分类.py
assignment_unknown,fit,kmeans.fit(data),86,"kmeans = KMeans(n_clusters=3, max_iter=300)",85,object.fit,object,算法实现/KMeans 聚类算法实现.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\KMeans 聚类算法实现.py
assignment_unknown,fit,kmeans.fit(data),100,"kmeans = cluster.KMeans(n_clusters=3, max_iter=300, tol=1e-4)",99,object.fit,object,算法实现/KMeans 聚类算法实现.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\KMeans 聚类算法实现.py
assignment_unknown,fit,"knn.fit(data, target)",80,knn = KNeighborsClassifier(n_neighbors=10),79,object.fit,object,算法实现/KNN 算法实现.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\KNN 算法实现.py
assignment_unknown,fit,"knn.fit(data, target)",94,knn = neighbors.KNeighborsClassifier(n_neighbors=10),93,object.fit,object,算法实现/KNN 算法实现.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\KNN 算法实现.py
assignment_import,fit,"lda.fit(x, y)",94,lda = LinearDiscriminantAnalysis(n_components=2),93,sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit,sklearn,算法实现/LDA 降维 (Python 实现).py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\LDA 降维 (Python 实现).py
assignment_unknown,fit,result = mean_shift.fit(data),217,"mean_shift = MeanShift(epsilon=1e-5, band_width=2, min_quantity=10, bin_seeding=True)",216,object.fit,object,算法实现/MeanShift 聚类算法.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\MeanShift 聚类算法.py
assignment_import,fit_transform,result_pca = pca.fit_transform(X),233,pca = PCA(n_components=n),232,sklearn.decomposition.PCA.fit_transform,sklearn,算法实现/PCA 降维 (Python实现).py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\PCA 降维 (Python实现).py
assignment_import,fit,"maybeModel = linear_clf.fit(trans.fit_transform(maybe_inliers[:, :-1]), maybe_inliers[:, -1])",37,linear_clf = LinearRegression(),16,sklearn.linear_model.LinearRegression.fit,sklearn,算法实现/RANSAC 算法.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\RANSAC 算法.py
assignment_import,fit_transform,"maybeModel = linear_clf.fit(trans.fit_transform(maybe_inliers[:, :-1]), maybe_inliers[:, -1])",37,trans = PolynomialFeatures(degree=2),15,sklearn.preprocessing.PolynomialFeatures.fit_form,sklearn,算法实现/RANSAC 算法.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\RANSAC 算法.py
assignment_import,fit,"betterModel = linear_clf.fit(trans.fit_transform(better_data[:, :-1]), better_data[:, -1])",43,linear_clf = LinearRegression(),16,sklearn.linear_model.LinearRegression.fit,sklearn,算法实现/RANSAC 算法.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\RANSAC 算法.py
assignment_import,fit_transform,"betterModel = linear_clf.fit(trans.fit_transform(better_data[:, :-1]), better_data[:, -1])",43,trans = PolynomialFeatures(degree=2),15,sklearn.preprocessing.PolynomialFeatures.fit_form,sklearn,算法实现/RANSAC 算法.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\RANSAC 算法.py
assignment_import,fit,knn.fit(X_),69,knn = NearestNeighbors(n_neighbors=self._k_neighbors),68,sklearn.neighbors.NearestNeighbors.fit,sklearn,算法实现/SMOTE 过采样算法.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\SMOTE 过采样算法.py
assignment_import,fit_transform,tf_idf = tf_idf_transformer.fit_transform(vectorizer.fit_transform(x_train)),119,tf_idf_transformer = TfidfTransformer(),117,sklearn.feature_extraction.text.TfidfTransformer.fit_transform,sklearn,算法实现/TF-IDF 逆文本频率指数.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\TF-IDF 逆文本频率指数.py
assignment_import,fit_transform,tf_idf = tf_idf_transformer.fit_transform(vectorizer.fit_transform(x_train)),119,vectorizer = CountVectorizer(max_features=10),115,sklearn.feature_extraction.text.CountVectorizer.fit_transform,sklearn,算法实现/TF-IDF 逆文本频率指数.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\TF-IDF 逆文本频率指数.py
assignment_unknown,fit,"reg.fit(X=X_train, y=y_train, max_depth=20)",172,reg = RegressionTree(),171,object.fit,object,算法实现/回归树算法.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\回归树算法.py
assignment_import,fit,"svr.fit(feat, score)",124,"svr = GridSearchCV(SVR(), param_grid=parameters, cv=4)    # 4折交叉验证",122,sklearn.model_selection.GridSearchCV.fit,sklearn,算法实现/图像无参考评价模型BRISQUE.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\图像无参考评价模型BRISQUE.py
custom_function,fit,self.fit(documents),48,"def fit(self, x_train, y_train):",83,fit.self,fit,算法实现/朴素贝叶斯算法 (Python 实现).py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\朴素贝叶斯算法 (Python 实现).py
assignment_unknown,fit_transform,x_train = tf.fit_transform(documents),115,tf = TfidfVectorizerMine(),113,object.fit_transform,object,算法实现/朴素贝叶斯算法 (Python 实现).py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\朴素贝叶斯算法 (Python 实现).py
assignment_unknown,fit,"mNB.fit(x_train, y_train)",121,mNB = NaiveBayes(),120,object.fit,object,算法实现/朴素贝叶斯算法 (Python 实现).py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\朴素贝叶斯算法 (Python 实现).py
custom_function,fit,self.fit(documents),49,"def fit(self, documents):",21,fit.self,fit,算法实现/词袋 BoW.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\词袋 BoW.py
import,fit,kmeans = KMeans(n_clusters=self.n_components).fit(self._X),91,from sklearn.cluster import KMeans,49,sklearn.cluster.KMeans.(n_clusters=self.n_components).fit,sklearn,算法实现/GMM 高斯混合模型/GMM 高斯混合模型一.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\GMM 高斯混合模型\GMM 高斯混合模型一.py
import,fit,kmeans = KMeans(n_clusters=self.n_components).fit(self._X),109,from sklearn.cluster import KMeans,49,sklearn.cluster.KMeans.(n_clusters=self.n_components).fit,sklearn,算法实现/GMM 高斯混合模型/GMM 高斯混合模型一.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\GMM 高斯混合模型\GMM 高斯混合模型一.py
assignment_import,fit,gmm.fit(X),189,"gmm = GaussianMixture(n_components=3, max_iter=50)",188,sklearn.mixture.GaussianMixture.fit,sklearn,算法实现/GMM 高斯混合模型/GMM 高斯混合模型一.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\GMM 高斯混合模型\GMM 高斯混合模型一.py
assignment_unknown,fit,gmm.fit(X),201,"gmm = GMM(n_components=3, max_iter=50)",200,object.fit,object,算法实现/GMM 高斯混合模型/GMM 高斯混合模型一.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\GMM 高斯混合模型\GMM 高斯混合模型一.py
import,fit_transform,data = Normalizer().fit_transform(data),91,from sklearn.preprocessing import Normalizer,11,sklearn.preprocessing.Normalizer.().fit_transform,sklearn,算法实现/GMM 高斯混合模型/GMM 高斯混合模型三.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\GMM 高斯混合模型\GMM 高斯混合模型三.py
assignment_import,fit,g.fit(data),129,g = mixture.GaussianMixture(n_components=3),128,sklearn.mixture.fit,sklearn,算法实现/GMM 高斯混合模型/GMM 高斯混合模型三.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\GMM 高斯混合模型\GMM 高斯混合模型三.py
import,fit,kmeans = KMeans(n_clusters=n_clusters).fit(X),44,from sklearn.cluster import KMeans,8,sklearn.cluster.KMeans.(n_clusters=n_clusters).fit,sklearn,算法实现/GMM 高斯混合模型/GMM 高斯混合模型二.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\GMM 高斯混合模型\GMM 高斯混合模型二.py
import,fit,"gmm = GaussianMixture(n_components=n_clusters, max_iter=50).fit(X)",226,from sklearn.mixture import GaussianMixture,10,"sklearn.mixture.GaussianMixture.(n_components=n_clusters, max_iter=50).fit",sklearn,算法实现/GMM 高斯混合模型/GMM 高斯混合模型二.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\GMM 高斯混合模型\GMM 高斯混合模型二.py
assignment_import,fit,kmeans.fit(image_training),29,"kmeans = KMeans(n_clusters=bins, random_state=0)",28,sklearn.cluster.KMeans.fit,sklearn,算法实现/图像显著性分析/HC 算法.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\图像显著性分析\HC 算法.py
assignment_import,fit,kmeans.fit(image_training),80,"kmeans = KMeans(n_clusters=50, random_state=0)",79,sklearn.cluster.KMeans.fit,sklearn,算法实现/图像显著性分析/HC 算法.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\图像显著性分析\HC 算法.py
assignment_import,load,im = img.load(),162,"img = Image.new('RGB', (width, height))",161,PIL.Image.load,PIL,算法实现/基于图的图像分割算法/基于图的图像分割 (Python 实现).py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\算法实现\基于图的图像分割算法\基于图的图像分割 (Python 实现).py
assignment_import,fit,"knn.fit(X_train, y_train)",41,"knn = KNeighborsClassifier(n_neighbors=5, algorithm='auto')",40,sklearn.neighbors.KNeighborsClassifier.fit,sklearn,练习实例/KNN 实现手写字体识别.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\练习实例\KNN 实现手写字体识别.py
assignment_unknown,fit,mle.fit(X=X),198,mle = HMM4MLE(),197,object.fit,object,练习实例/基于监督学习的隐马尔科夫模型 HMM 实现中文分词.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\练习实例\基于监督学习的隐马尔科夫模型 HMM 实现中文分词.py
assignment_import,fit,"grid.fit(X_train, y_train)",51,"grid = GridSearchCV(model, param_grid=param_grid, cv=5, iid=True)  # 选择模型，选择CV，就是交叉验证，如果不进行结果不准确",50,sklearn.model_selection.GridSearchCV.fit,sklearn,练习实例/支持向量机的人脸识别.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\练习实例\支持向量机的人脸识别.py
assignment_import,fit,"svc.fit(self._X_train, self._y_train)",128,"svc = SVC(kernel=""rbf"", probability=True)",127,sklearn.svm.SVC.fit,sklearn,练习实例/汽车位置检测.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\练习实例\汽车位置检测.py
assignment_import,fit,"svc.fit(self._X_train, self._y_train)",114,"svc = SVC(kernel=""linear"", probability=True)",113,sklearn.svm.SVC.fit,sklearn,练习实例/汽车检测 (是否包含汽车).py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\练习实例\汽车检测 (是否包含汽车).py
assignment_import,fit,"svm.fit(X_train, y_train)",199,"svm = SVC(kernel=""linear"", probability=True)",198,sklearn.svm.SVC.fit,sklearn,练习实例/汽车检测 (是否包含汽车).py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\练习实例\汽车检测 (是否包含汽车).py
assignment_import,fit,kmeans.fit(x),41,"kmeans = KMeans(n_clusters=self._n_clusters, random_state=0)",40,sklearn.cluster.KMeans.fit,sklearn,练习实例/SIFT_SURF 图像特征作目标检测(在图片中检测出 QQ 图标的位置)/template_match/template_descriptors.py,tianxing1994/OpenCV,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\tianxing1994@OpenCV\练习实例\SIFT_SURF 图像特征作目标检测(在图片中检测出 QQ 图标的位置)\template_match\template_descriptors.py
