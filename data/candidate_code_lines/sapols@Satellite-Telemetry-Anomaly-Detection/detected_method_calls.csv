call_root_type,method_name,method_call,line_no,call_root,call_root_line_no,qualifying_name,call_root_package,relative_file_path,repository_name,file_path
assignment_import,fit,"model_fit = model.fit(disp=1)  # TODO: pass in verbose and put this under ""if verbose"" for disp=1 else 0?",38,"model = ARIMA(history, order=arima_order)",37.0,statsmodels.tsa.arima_model.ARIMA.fit,statsmodels,grid_search_hyperparameters.py,sapols/Satellite-Telemetry-Anomaly-Detection,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\sapols@Satellite-Telemetry-Anomaly-Detection\grid_search_hyperparameters.py
assignment_import,fit,trained_model_fit = trained_model.fit(disp=1),171,"trained_model = SARIMAX(training, order=order, seasonal_order=seasonal_order, trend=trend, enforce_stationarity=False, enforce_invertibility=False)",169.0,statsmodels.tsa.statespace.sarimax.SARIMAX.fit,statsmodels,grid_search_hyperparameters.py,sapols/Satellite-Telemetry-Anomaly-Detection,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\sapols@Satellite-Telemetry-Anomaly-Detection\grid_search_hyperparameters.py
import,load,trained_model_fit = ARIMAResults.load(path_to_model),109,from statsmodels.tsa.arima_model import ARIMAResults,14.0,statsmodels.tsa.arima_model.ARIMAResults.load,statsmodels,model_with_arima.py,sapols/Satellite-Telemetry-Anomaly-Detection,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\sapols@Satellite-Telemetry-Anomaly-Detection\model_with_arima.py
assignment_import,fit,trained_model_fit = trained_model.fit(disp=1),114,"trained_model = SARIMAX(train, order=order, seasonal_order=seasonal_order, trend=trend)",104.0,statsmodels.tsa.statespace.sarimax.SARIMAX.fit,statsmodels,model_with_arima.py,sapols/Satellite-Telemetry-Anomaly-Detection,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\sapols@Satellite-Telemetry-Anomaly-Detection\model_with_arima.py
,fit,"self.model.fit(self.x, self.x,",124,,,self.model.fit,self,model_with_autoencoder.py,sapols/Satellite-Telemetry-Anomaly-Detection,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\sapols@Satellite-Telemetry-Anomaly-Detection\model_with_autoencoder.py
assignment_import,fit_transform,"X_scaled = min_max_scaler.fit_transform(X).reshape(1, -1).tolist()[0]",172,min_max_scaler = preprocessing.MinMaxScaler(),171.0,sklearn.preprocessing.fit_transform,sklearn,model_with_autoencoder.py,sapols/Satellite-Telemetry-Anomaly-Detection,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\sapols@Satellite-Telemetry-Anomaly-Detection\model_with_autoencoder.py
assignment_class,fit,"ae.fit(batch_size=50, epochs=1000)",201,"ae = AutoEncoder(train, encoding_dim=10, verbose=verbose)  # Note, training autoencoder just with train data",199.0,AutoEncoder.fit,AutoEncoder,model_with_autoencoder.py,sapols/Satellite-Telemetry-Anomaly-Detection,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\sapols@Satellite-Telemetry-Anomaly-Detection\model_with_autoencoder.py
import,load,features = np.load(features_path),172,import numpy as np,8.0,numpy.load,numpy,score_with_rrcf.py,sapols/Satellite-Telemetry-Anomaly-Detection,C:\Users\tajki\OneDrive\Documents\GitHub\dataset-model-source_code-integration-analyzer\data\repositories_for_manual_analysis\sapols@Satellite-Telemetry-Anomaly-Detection\score_with_rrcf.py
